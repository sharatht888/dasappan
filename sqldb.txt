CREATE DATABASE interview_system;

USE interview_system;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE questions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question_text TEXT NOT NULL);

INSERT INTO questions (question_text) VALUES
('Tell me about yourself.'),
('What are Python\'s key features?'),
('Explain the difference between lists, tuples, and sets in Python.'),
('What is the purpose of the __init__() method in Python classes?'),
('How does Python manage memory?'),
('What are Python\'s built-in data types?'),
('What is the difference between shallow and deep copy?'),
('What are the principles of OOP in Python?'),
('How does Python handle multiple inheritance?'),
('What is the difference between class methods and static methods?'),
('What is an iterator in Python?'),
('What is a generator in Python?'),
('How does Python handle exceptions?'),
('What is the difference between assert and exceptions?'),
('How do you perform unit testing in Python?'),
('What are decorators in Python?'),
('Explain the Global Interpreter Lock (GIL).'),
('What are context managers in Python?'),
('How would you implement a stack in Python?'),
('How do you reverse a string in Python?'),
('How would you find the first non-repeating character in a string?'),
('What are the differences between Django and Flask?'),
('How do you handle database migrations in Django?'),
('What is a RESTful API, and how do you implement one in Python?'),
('How do you deploy a Python application?'),
('What is Docker, and how is it used with Python applications?'),
('How do you manage dependencies in Python projects?'),
('Describe a challenging bug you encountered and how you resolved it.'),
('How do you stay updated with the latest developments in Python?'),
('Why do you want to work with our company?');

CREATE TABLE interview_responses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    question_id INT NOT NULL,
    attempt_number INT NOT NULL,
    response TEXT NOT NULL,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);


CREATE TABLE interview_scores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    question_id INT NOT NULL,
    attempt_number INT NOT NULL,
    score INT NOT NULL,
    feedback TEXT,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);

CREATE TABLE employers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO employers (username, email, password_hash) 
VALUES ('admin', 'admin@company.com', SHA2('admin', 256));

ALTER TABLE users ADD COLUMN resume_path VARCHAR(255);
